from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from database.bot_db import get_qr_code, get_category, get_guide, insert_sql, get_qr_code_tour, get_username_user
from keyboards.client_kb import (
    submit_markup,
    cancel_markup,
    quantity_markup
)


class FSMAdmin(StatesGroup):
    qr_code = State()
    username = State()
    quantity = State()
    number = State()
    submit = State()


async def fsm_start(message: types.Message):
    await FSMAdmin.qr_code.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç—É—Ä–∞: ")


async def load_qr_code(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["qr_code"] = await get_qr_code_tour(message.text)
    tour = await get_qr_code(message.text)
    category = await get_category(tour[13])
    guide = await get_guide(tour[14])
    site = f"<a href='http://164.92.190.147:8880/home/tour/{tour[4]}'>Tour</a>"
    await message.answer(
        f"\n–¢—É—Ä: <i>{tour[1]}</i>"
        f"\n–¶–µ–Ω–∞: <i>{tour[3]}</i>"
        f"\n–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: <i>{tour[6]}</i>"
        f"\n–î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞: <i>{tour[7]}</i>"
        f"\n–õ–∏–º–∏—Ç: <i>{tour[8]}</i>"
        f"\n–°–∫–æ–ª—å–∫–æ: <i>{tour[9]}</i>"
        f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <i>{tour[11]} –¥–Ω–µ–π</i>"
        f"\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: <i>{tour[12]}</i>"
        f"\n–ì–∏–¥: <i>{guide[0]} {guide[1]}</i>"
        f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <i>{category[0]}</i>"
        f"\nSite: <i>{site}</i>",
        parse_mode="HTML",
    )
    await FSMAdmin.next()
    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ç—É—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ —Ç–æ–≥–¥–∞ \n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–ö–æ—Ç–æ—Ä–æ–≥–æ –≤–≤–µ–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")
    await message.answer("–ï—Å–ª–∏ –Ω–µ —ç—Ç–æ—Ç —Ç—É—Ä —Ç–æ —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ Cancel", reply_markup=cancel_markup)


async def load_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["username"] = await get_username_user(message.text)
    await FSMAdmin.next()
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", reply_markup=quantity_markup
    )


async def load_quantity(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["quantity"] = message.text
    await FSMAdmin.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_markup)


async def load_number(message: types.Message, state: FSMContext):
    if (
            int(message.text)
            and len(str(message.text)) == 10
            and str(message.text).startswith("0")
    ):
        async with state.proxy() as data:
            data["number"] = f"+996{message.text}"
        await message.answer(
            f'\nUsername: {data["username"]}'
            f'\n–ù–æ–º–µ—Ä: {data["number"]} '
            f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data["quantity"]}'
            f'\n–ö–æ–¥ –¢—É—Ä–∞: {data["qr_code"]}'
        )
        await FSMAdmin.next()
        await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã?", reply_markup=submit_markup)

    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: –Ω–∞–ø—Ä–∏–º–µ—Ä 0777123456", reply_markup=cancel_markup
        )


async def submit(message: types.Message, state: FSMContext):
    if message.text == "–î–ê":
        await insert_sql(state)
        await state.finish()
        await message.answer(
            "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            "\n<i><b>–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ì–∏–¥.</b></i>"
            "\n<b> –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!</b>ü§ó ",
            parse_mode="HTML",
        )
    elif message.text == ["–ù–ï–¢", "CANCEL"]:
        await message.answer(
            "–û—Ç–º–µ–Ω–∞! –ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /reg"
        )
        await state.finish()
    else:
        await message.answer("–î–ê –∏–ª–∏ –ù–ï–¢?!")


async def cancel_reg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±—Ä–æ–Ω—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /arrange")
        await state.finish()


def register_handlers_fsm_student(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, state="*", commands=["CANCEL"])
    dp.register_message_handler(
        cancel_reg, Text(equals=["CANCEL", "–û—Ç–º–µ–Ω–∞"], ignore_case=True), state=["*"]
    )
    dp.register_message_handler(fsm_start, commands=["arrange"])
    dp.register_message_handler(load_qr_code, state=FSMAdmin.qr_code)
    dp.register_message_handler(load_username, state=FSMAdmin.username)
    dp.register_message_handler(load_number, state=FSMAdmin.number)
    dp.register_message_handler(load_quantity, state=FSMAdmin.quantity)
    dp.register_message_handler(submit, state=FSMAdmin.submit)
