from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from database.bot_db import (
    get_qr_code,
    insert_sql,
    get_qr_code_tour,
    get_username_user,
    get_username,
    get_tour_title,
    get_tour_price,
    get_actual_limit,
    get_quantity_limit,
    update_actual_limit,
)
from keyboards.client_kb import (
    submit_markup,
    cancel_markup,
    quantity_markup,
    share_number,
    payment_markup,
)


class FSMAdmin(StatesGroup):
    qr_code = State()
    username = State()
    quantity = State()
    number = State()
    way_of_payment = State()
    payment = State()
    submit = State()


async def fsm_start(message: types.Message):
    await FSMAdmin.qr_code.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç—É—Ä–∞: ")


async def load_qr_code(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["qr_code"] = await get_qr_code_tour(message.text)
    tour = await get_qr_code(message.text)
    await message.answer(
        (
            f"\n–¢—É—Ä: {tour[1]}"
            f"\n–¶–µ–Ω–∞: {tour[3]}"
            f"\n–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {tour[6]}"
            f"\n–î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞: {tour[7]}"
            f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {tour[8]}"
            f"\n–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª: {tour[9]}"
            f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tour[11]} –¥–Ω–µ–π"
        )
    )
    await FSMAdmin.next()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–ö–æ—Ç–æ—Ä–æ–≥–æ –≤–≤–µ–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π)"
        "\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —ç—Ç–æ—Ç —Ç—É—Ä —Ç–æ —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ Cancel",
        reply_markup=cancel_markup,
    )


async def load_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["username"] = await get_username_user(message.text)
    await FSMAdmin.next()
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=quantity_markup
    )


async def load_quantity(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        tour = data["qr_code"]
        actual_limit = await get_actual_limit(tour)
        quantity_limit = await get_quantity_limit(tour)
        if actual_limit + int(message.text) <= quantity_limit:
            data["quantity"] = message.text
            await FSMAdmin.next()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=share_number)
        else:
            if quantity_limit - actual_limit != 0:
                await message.answer(
                    f"–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {quantity_limit - actual_limit} –º–µ—Å—Ç",
                    reply_markup=quantity_markup,
                )
            await message.answer(
                f"–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –º–µ—Å—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—É—Ä  –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ CANCEL",
                reply_markup=cancel_markup,
            )


async def load_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["number"] = message.contact.phone_number
        await FSMAdmin.next()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_markup)


async def load_way_of_payment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        price = await get_tour_price(str(data["qr_code"][0]))
        summ = int(data["quantity"]) * int(price)
    if message.text == "MBank":
        await message.answer(f"–ù–æ–º–µ—Ä –ú–±–∞–Ω–∫: 0778116934 \n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {summ}")
    if message.text == "Optima":
        await message.answer(f"–ù–æ–º–µ—Ä Optima: 0778116934 \n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {summ}")
    async with state.proxy() as data:
        data["way_of_payment"] = message.text
        await FSMAdmin.next()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –±—Ä–æ–Ω—å")


async def load_payment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["payment"] = message.photo[0].file_id
    username = await get_username(str(data["username"][0]))
    tour = await get_tour_title(str(data["qr_code"][0]))
    await message.answer_photo(
        photo=data["payment"],
        caption=f"\nUsername: {username[0]}"
                f'\n–ù–æ–º–µ—Ä: {data["number"]} '
                f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data["quantity"]}'
                f"\n–¢—É—Ä: {tour[0]}",
    )
    await FSMAdmin.next()
    await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã?", reply_markup=submit_markup)


async def submit(message: types.Message, state: FSMContext):
    if message.text == "–î–ê":
        await insert_sql(state)
        async with state.proxy() as data:
            tour = data["qr_code"]
            quantity = data["quantity"]
            actual_limit = await get_actual_limit(tour)
            summ = int(quantity) + actual_limit
            await update_actual_limit(tour_id=tour, quantity=summ)
        await state.finish()
        await message.answer(
            "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            "\n<i><b>–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ì–∏–¥.</b></i>"
            "\n<b> –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!</b>ü§ó ",
            parse_mode="HTML",
        )
    elif message.text == ["–ù–ï–¢", "CANCEL"]:
        await message.answer(
            "–û—Ç–º–µ–Ω–∞! –ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /reg"
        )
        await state.finish()
    else:
        await message.answer("–î–ê –∏–ª–∏ –ù–ï–¢?!")


async def cancel_reg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±—Ä–æ–Ω—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /arrange"
        )
        await state.finish()


def register_handlers_fsm_student(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, state="*", commands=["CANCEL"])
    dp.register_message_handler(
        cancel_reg, Text(equals=["CANCEL", "–û—Ç–º–µ–Ω–∞"], ignore_case=True), state=["*"]
    )
    dp.register_message_handler(fsm_start, commands=["arrange"])
    dp.register_message_handler(load_qr_code, state=FSMAdmin.qr_code)
    dp.register_message_handler(load_username, state=FSMAdmin.username)
    dp.register_message_handler(
        load_number, state=FSMAdmin.number, content_types=types.ContentType.CONTACT
    )
    dp.register_message_handler(load_quantity, state=FSMAdmin.quantity)
    dp.register_message_handler(load_way_of_payment, state=FSMAdmin.way_of_payment)
    dp.register_message_handler(
        load_payment, state=FSMAdmin.payment, content_types=["photo"]
    )
    dp.register_message_handler(submit, state=FSMAdmin.submit)
